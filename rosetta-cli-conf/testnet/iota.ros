request_funds(1){
  find_account{
    currency = {"symbol":"IOTA", "decimals":0};
    random_account = find_balance({
      "minimum_balance":{
        "value": "0",
        "currency": {{currency}}
      },
      "create_limit":1
    });
  },

  // Create a separate scenario to request funds so that
  // the address we are using to request funds does not
  // get rolled back if funds do not yet exist.
  request{
    loaded_account = find_balance({
      "account_identifier": {{random_account.account_identifier}},
      "minimum_balance":{
        "value": "1000000",
        "currency": {{currency}}
      },
      "require_coin":true
    });
  }
}

create_account(1){
  create{
    network = {"network":"testnet7", "blockchain":"iota"};
    key = generate_key({"curve_type": "edwards25519"});
    account = derive({
      "network_identifier": {{network}},
      "public_key": {{key.public_key}}
    });

    // If the account is not saved, the key will be lost!
    save_account({
      "account_identifier": {{account.account_identifier}},
      "keypair": {{key}}
    });
  }
}

transfer(1){
  transfer{
    transfer.network = {"network":"testnet7", "blockchain":"iota"};
    currency = {"symbol":"IOTA", "decimals":0};

    // Find sender
    sender = find_balance({
      "minimum_balance":{
        "value": "10000000",
        "currency": {{currency}}
      },
      "require_coin":true
    });

    available_balance = {{sender.balance.value}};
    sender_amount = math({
      "operation": "subtraction",
      "left_value": "0",
      "right_value": {{available_balance}}
    });

    // Find dust receiver
    dust_receiver = find_balance({
      "not_account_identifier":[{{sender.account_identifier}}],
      "minimum_balance":{
        "value": "0",
        "currency": {{currency}}
      },
      "create_limit": 100,
      "create_probability": 50
    });

    dust_threshold = 1000000;
    dust_receiver_amount = random_number({
      "minimum": 0,
      "maximum": {{dust_threshold}}
    });

    available_balance = {{available_balance}} - {{dust_receiver_amount}};

    // Find receiver

    receiver = find_balance({
      "not_account_identifier":[{{sender.account_identifier}}, {{dust_receiver.account_identifier}}],
      "minimum_balance":{
        "value": "0",
        "currency": {{currency}}
      },
      "create_limit": 100,
      "create_probability": 50
    });

    receiver_amount = {{available_balance}};

    print_message({"sender":{{sender}}});
    print_message({"receiver":{{receiver}}});

    transfer.confirmation_depth = "1";
    transfer.operations = [
      {
        "operation_identifier":{
          "index":0,
          "network_index":0
        },
        "type":"UTXO_INPUT",
        "account":{{sender.account_identifier}},
        "amount":{
          "value":{{sender_amount}},
          "currency":{{currency}}
        },
        "coin_change": {
          "coin_identifier": {{sender.coin}},
          "coin_action": "coin_spent"
        }
      },
      {
        "operation_identifier":{
          "index":2
        },
        "type":"UTXO_OUTPUT",
        "account":{{receiver.account_identifier}},
        "amount":{
          "value":{{receiver_amount}},
          "currency":{{currency}}
        }
      },
      {
        "operation_identifier":{
          "index":3
        },
        "type":"UTXO_OUTPUT",
        "account":{{dust_receiver.account_identifier}},
        "amount":{
          "value":{{dust_receiver_amount}},
          "currency":{{currency}}
        }
      }
    ];
  }
}