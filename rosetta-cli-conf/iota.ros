request_funds(1){
  find_account{
    currency = {"symbol":"IOTA", "decimals":0};
    random_account = find_balance({
      "minimum_balance":{
        "value": "0",
        "currency": {{currency}}
      },
      "create_limit":1
    });
  },

  // Create a separate scenario to request funds so that
  // the address we are using to request funds does not
  // get rolled back if funds do not yet exist.
  request{
    loaded_account = find_balance({
      "account_identifier": {{random_account.account_identifier}},
      "minimum_balance":{
        "value": "10000000",
        "currency": {{currency}}
      },
      "require_coin":true
    });
  }
}

create_account(1){
  create{
    network = {"network":"testnet6", "blockchain":"iota"};
    key = generate_key({"curve_type": "edwards25519"});
    account = derive({
      "network_identifier": {{network}},
      "public_key": {{key.public_key}}
    });

    // If the account is not saved, the key will be lost!
    save_account({
      "account_identifier": {{account.account_identifier}},
      "keypair": {{key}}
    });
  }
}

transfer(1){
  transfer{
    transfer.network = {"network":"testnet6", "blockchain":"iota"};
    currency = {"symbol":"IOTA", "decimals":0};
    sender = find_balance({
      "minimum_balance":{
        "value": "20000000",
        "currency": {{currency}}
      }
    });

    // list inputs from faucet deposits
    inputA = "10000000";
    inputB = "10000000";

    // Set the amountA as some value <= sender.balance - dust_allowance
    dust_allowance = "10000000";
    available_amount = {{inputA}} + {{inputB}};
    amountA = random_number({"minimum": {{dust_allowance}}, "maximum": {{available_amount}}});
    print_message({"amountA":{{amountA}}});

    // Set the amountB as available_amount - amountA
    amountB = {{available_amount}} - {{amountA}}
    print_message({"amountB":{{amountB}}});

    // Find recipient and construct operations
    recipient = find_balance({
      "not_account_identifier":[{{sender.account_identifier}}],
      "minimum_balance":{
        "value": "0",
        "currency": {{currency}}
      },
      "create_limit": 100,
      "create_probability": 50
    });

    // Find change (not necessarily sharing key with recipient) and construct operations
    change = find_balance({
      "not_account_identifier":[{{sender.account_identifier}}, {{recipient.account_identifier}}],
      "minimum_balance":{
        "value": "0",
        "currency": {{currency}}
      },
      "create_limit": 100,
      "create_probability": 50
    });

    print_message({"sending from":{{sender}}});
    print_message({"sending to":{{recipient}}});
    print_message({"sending to":{{change}}});

    transfer.confirmation_depth = "1";
    transfer.operations = [
      {
        "operation_identifier":{"index":0},
        "type":"UTXO_INPUT",
        "account":{{sender.account_identifier}},
        "amount":{
          "value":{{inputA}},
          "currency":{{currency}}
        },
        "coin_change": {
          "coin_identifier": {
            "identifier": idA
          },
          "coin_action": "coin_spent"
        },
        "metadata": {
          "is_spent": "UTXO_UNSPENT"
        }
      },
      {
        "operation_identifier":{"index":0},
        "type":"UTXO_INPUT",
        "account":{{sender.account_identifier}},
        "amount":{
          "value":{{inputB}},
          "currency":{{currency}}
        },
        "coin_change": {
          "coin_identifier": {
            "identifier": idB
          },
          "coin_action": "coin_spent"
        },
        "metadata": {
          "is_spent": "UTXO_UNSPENT"
        }
      },
      {
        "operation_identifier":{"index":1},
        "type":"UTXO_OUTPUT",
        "account":{{recipient.account_identifier}},
        "amount":{
          "value":{{amountA}},
          "currency":{{currency}}
        },
        "metadata": {
          "is_spent": "UTXO_UNSPENT"
        }
      },
      {
          "operation_identifier":{"index":1},
          "type":"UTXO_OUTPUT",
          "account":{{change.account_identifier}},
          "amount":{
            "value":{{amountB}},
            "currency":{{currency}}
          },
          "metadata": {
            "is_spent": "UTXO_UNSPENT"
          }
        }
    ];
  }
}